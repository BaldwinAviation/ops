#!/bin/bash

#
#  _____         _ _ _         _
# |     |___ ___| | | |___ ___| |_ ___
# |  |  | . |_ -| | | | . |  _| '_|_ -|
# |_____|  _|___|_____|___|_| |_,_|___|
#       |_|
#
#  ____          _
# |    \ ___ ___| |___ _ _ ___ ___
# |  |  | -_| . | | . | | | -_|  _|
# |____/|___|  _|_|___|_  |___|_|
#           |_|       |___|
#
#
#  A simple script to deploy an
#  app instance on OpsWorks.
#
set -euo pipefail
IFS=$'\n\t'

# The current version of this script
SCRIPT_VERSION=1.0.0

# Opsworks API calls are all made to the us-east-1 region
# See: http://docs.aws.amazon.com/cli/latest/reference/opsworks/index.html
AWS_OPSWORKS_REGION=us-east-1

die () {
  echo >&2 "$@"
  exit 1
}

usage () {
  echo "usage: $0 [stack-name] [app-name]"
  echo "usage: STACK_NAME=stack-name APP_NAME=app-name $0"
  echo "options: MIGRATE=true|false (default: true)"
}

deployment_status () {
  DEPLOYMENT_STATUS=$(
    aws opsworks --region="$AWS_OPSWORKS_REGION" describe-deployments \
    --deployment-id="$1" \
    --query "Deployments[0].Status" \
    | \
    grep -oE "successful|running|failed"
  )
}

set +u
STACK_NAME=${STACK_NAME:-$1}
APP_NAME=${APP_NAME:-$2}
DEPLOYMENT_COMMENT=${DEPLOYMENT_COMMENT:-${3:-Automated\ deployment}}
DEPLOYMENT_COMMENT="$DEPLOYMENT_COMMENT (script version: $SCRIPT_VERSION)"
MIGRATE=${MIGRATE:-true}
set -u

if [ -z "$STACK_NAME" ]; then
  usage
  die "A stack name is required"
fi

if [ -z "$APP_NAME" ]; then
  usage
  die "An app name is required"
fi

# Verify that aws is available in the PATH
hash aws 2>/dev/null || die "Unable to find the aws CLI, ensure it is installed (e.g. pip install aws)"

# A quick note about the aws opsworks commands below:
# The result of the command is a JSON document, which is being
# queried/filtered using the JMESPath expressions.
# If the expressions do not match, an empty result set is returned,
# and if they do match, a result set containing the matched value is
# returned. Something like:
#     [
#         "b8005517-60c2-4600-a1cd-258e4d67e26e"
#     ]
#
# The grep commands are used solely to retrieve the actual unquoted value
# out of that result set. They are not used to process the actual JSON document.


# Retrieve the Stack ID for the named stack
STACK_ID=$(
  aws opsworks --region="$AWS_OPSWORKS_REGION" describe-stacks \
  --query "Stacks[?Name == \`$STACK_NAME\`].StackId" \
  | \
  grep -o "\\w\{8\}-\\w\{4\}-\\w\{4\}-\\w\{4\}-\\w\{12\}"
)

if [ -z "$STACK_ID" ]; then
  die "Unable to retrieve the Stack ID for $STACK_NAME"
fi

# Retrieve the App ID for the named app
APP_ID=$(
  aws opsworks --region="$AWS_OPSWORKS_REGION" describe-apps \
  --stack-id="$STACK_ID" \
  --query "Apps[?Name == \`$APP_NAME\`].AppId" \
  | \
  grep -o "\\w\{8\}-\\w\{4\}-\\w\{4\}-\\w\{4\}-\\w\{12\}"
)

if [ -z "$APP_ID" ]; then
  die "Unable to retrieve the App ID for $APP_NAME on Stack $STACK_NAME"
fi

# Issue a deploy for the stack and app,
# defaulting to deploy across all instances in the layer
echo "Performing deployment with MIGRATE=$MIGRATE"

DEPLOYMENT_ID=$(
  aws opsworks --region="$AWS_OPSWORKS_REGION" create-deployment \
  --stack-id="$STACK_ID" \
  --app-id="$APP_ID" \
  --command='{"Name": "deploy", "Args": { "migrate": ["$MIGRATE"] } }' \
  --comment="$DEPLOYMENT_COMMENT" \
  | \
  grep -o "\\w\{8\}-\\w\{4\}-\\w\{4\}-\\w\{4\}-\\w\{12\}"
)

if [ -z "$DEPLOYMENT_ID" ]; then
  die "The deploy was unsuccessful for App $APP_NAME on Stack $STACK_NAME"
fi

echo "Successfully created deployment $DEPLOYMENT_ID, beginning to monitor"

deployment_status $DEPLOYMENT_ID

if [ -z "$DEPLOYMENT_STATUS" ]; then
  die "Unable to retrieve the deployment status, or it was not one of successful, running, or failed"
fi

while [ $DEPLOYMENT_STATUS = "running" ]; do
  echo -n "."
  sleep 10s
  deployment_status $DEPLOYMENT_ID
done

echo ""

if [ -z "$DEPLOYMENT_STATUS" ]; then
  die "An error occurred detecting the status of the current deployment"
elif [ "$DEPLOYMENT_STATUS" = "failed" ]; then
  die "The deploy for app $APP_NAME failed"
else
  echo "The deploy for app $APP_NAME was successful"
fi